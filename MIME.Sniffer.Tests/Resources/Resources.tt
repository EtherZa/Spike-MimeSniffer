<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="EnvDte" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
    var visualStudio = (this.Host as IServiceProvider)
        .GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
    
    var project = visualStudio.Solution
        .FindProjectItem(this.Host.TemplateFile)
        .ContainingProject as EnvDTE.Project;

    Model model = new Model(project.Properties.Item("DefaultNamespace").Value.ToString(), this.Host.ResolvePath(string.Empty));

    Action<Model.Path> renderCollection = null;
    Action<Model.Path> renderCollections = null;
    Action<Model.Path> renderItems = null;

    renderCollections = delegate(Model.Path path)
    {
        foreach (var folder in path.Folders) {
            renderCollection(folder);
        #>

        
        public IResourceCollection <#= folder.Name #> 
        { 
            get 
            { 
                return new <#= folder.Name #>Collection();
            }
        }
<#}#>

            public IEnumerable<IResourceCollection> Collections 
            { 
                get
                {
<# if (path.Folders.Any())
{
    foreach (var folder in path.Folders) {#>
                    yield return this.<#= folder.Name #>; 
<#}} else {#>
                    return null;
<# } #>
                }
            }
<#};


    renderItems = delegate(Model.Path path)
    {
        foreach (var file in path.Files) {
#>

            public Resource <#= file.Name #> 
            {
                get
                {
                    return new Resource("<#= file.Name #>", @"<#= file.FileName #>");
                }
            }

        <# } #>

             public IEnumerable<Resource> All 
             { 
                get
                {
<# if (path.Files.Any()) {
    foreach (var file in path.Files) {#>
                    yield return this.<#= file.Name #>;
<# }} else {#>
                    return null;   
<# } #>
                }
            }
<#};

    renderCollection = delegate(Model.Path path)
    {#>
        
        public class <#= path.Name #>Collection : IResourceCollection
        {
            <# renderItems(path); #>
            <# renderCollections(path); #>

            public string Name { get { return "<#= path.Name #>"; } }
        }
<#};

    Action<Model.Path> renderPath = null;
    renderPath = delegate(Model.Path path)
    {#>
    public class <#= path.Name #>Collection : IResourceCollection
    {


        public IEnumerable<IResourceCollection> Collections
        {
            get
            {
            return null;
            }
        }

            }
        }
    }
<#
    };
#>
namespace <#= model.Namespace #> 
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Reflection;

    <# renderCollection(model.Root); #>

    public static class Resources
    {
        static <#= model.Root.Name #>Collection defaultCollection = new <#= model.Root.Name #>Collection();

        public static <#= model.Root.Name #>Collection Default
        {
            get 
            {
                return defaultCollection;
            }
        }
    }

    public interface IResourceCollection
    {
        string Name { get; }

        IEnumerable<IResourceCollection> Collections { get; }

        IEnumerable<Resource> All { get; }
    }

    public sealed class Resource
    {
        static string assemblyPath;

        static Resource()
        {
            string codeBase = Assembly.GetExecutingAssembly().CodeBase;
            UriBuilder uri = new UriBuilder(codeBase);
            string path = Uri.UnescapeDataString(uri.Path);
            assemblyPath = Path.GetDirectoryName(path);
        }

        internal Resource(string name, string fileName)
        {
            this.Name = name;
            this.FullPath = fileName.Replace("~", assemblyPath);
        }

        public string Name { get; private set; }

        public Byte[] Content
        {
            get
            {
                return File.ReadAllBytes(this.FullPath);
            }
        }

        public string FileName 
        { 
            get
            {
               var file = new FileInfo(this.FullPath);
               return file.Name;                                
            }
        }

        public string FullPath { get; }
    }    
}
<#+
    private class Model
    {
        private readonly string path;

        public Model(string nSpace, string path)
        {
            this.Namespace = nSpace;
            this.path = path;
        }

        public string Namespace { get; private set; }

        public Path Root 
        {
            get 
            {
                var di = new DirectoryInfo(this.path);
                return new Path(di);
            }
        }

        public class Path
        {
            static Regex Banned = new Regex("[^a-zA-Z0-9]", RegexOptions.Compiled);

            const string fileMask = "*.*";
            const string dirMask = "*.*";

            private readonly string root;
            private readonly Path[] folders;
            private readonly File[] files;

            public Path(DirectoryInfo root)
                : this (root.Parent.FullName, root.FullName, root.Name, root.GetDirectories(dirMask), null)
            {
            }

            public Path(string root, string fullPath, string name, DirectoryInfo[] folders, FileInfo[] files)
            {
                this.root = root;
                this.FullPath = fullPath;                                
                this.Name = Banned.Replace(name, string.Empty);                                
                this.folders = (folders ?? new DirectoryInfo[0])
                    .Select(
                        x => 
                        {
                            var dirs = x.GetDirectories(dirMask);
                            var f = x.GetFiles(fileMask);

                            if (f.Any() || dirs.Any())
                            {
                                return new Path(this.root, x.FullName, x.Name, dirs, f);
                            }

                            return null;
                        })
                    .Where(x => x != null)
                    .ToArray();

                this.files = (files ?? new FileInfo[0]).Select(x => new File(x, this.root)).ToArray();
            }

            public string FullPath { get; private set; }
            
            public string Name { get; private set; }

            public IEnumerable<Path> Folders
            {
                get 
                {
                    return this.folders;
                }
            }

            public IEnumerable<File> Files
            {
                get 
                {
                    return this.files;
                }
            }

            public class File
            {
                public File(FileInfo file, string root)
                {
                   this.Name = Banned.Replace(file.Name.Substring(0, file.Name.Length - file.Extension.Length), string.Empty);
                   if (Regex.IsMatch(this.Name, @"^\d"))
                   {
                        this.Name = "_" + this.Name;
                   }

                   this.FileName = file.FullName.Replace(root, "~");
                }

                public string FileName { get; private set; }

                public string Name { get; private set; }
            }
        }
    }
#>